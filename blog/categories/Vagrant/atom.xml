<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Vagrant | BEFOOL blog]]></title>
  <link href="http://befool-inc.github.io/blog/categories/Vagrant/atom.xml" rel="self"/>
  <link href="http://befool-inc.github.io/"/>
  <updated>2013-07-14T17:54:45+09:00</updated>
  <id>http://befool-inc.github.io/</id>
  <author>
    <name><![CDATA[8823-scholar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vagrantで開発環境構築を自動化する]]></title>
    <link href="http://befool-inc.github.io/blog/2013/07/14/use-vagrant/"/>
    <updated>2013-07-14T15:53:00+09:00</updated>
    <id>http://befool-inc.github.io/blog/2013/07/14/use-vagrant</id>
    <content type="html"><![CDATA[<p><img src="/images/posts/2013-07-14-use-vagrant/vagrant-logo.png" alt="Vagrant logo" /></p>

<p>森です。先日開催された <a href="http://chef-meetup.doorkeeper.jp/events/4624">Vagrant meetup</a> に参加しまして
開発者のHashimotoさんからVagrantのお話を聞くことができすごくホクホクしております。</p>

<p>熱が抜けないうちにVagrantを用いての開発環境作成のおさらいをこの場にまとめます</p>

<h2>Vagrant とは</h2>

<p>そもそもVagrantとは何か、乱暴にいうと <strong>開発環境を簡単に作成する</strong> ためのツールです。
Virtual Boxなどの仮想化ソフトウェアなどを用いて各人のマシンに本番環境にほぼ等しい環境を誤りなくセットアップしてくれます。</p>

<p>開発者の Hashimoto さんの <a href="http://mitchellh.com/the-tao-of-vagrant">The Tao of Vagrant</a> から引用すると</p>

<blockquote><p>In a world with Vagrant, developers can check out any repository from version control, run vagrant up, and have a fully running development environment without any human interaction.
Developers continue to work on their own machine, in the comfort of their own editors, browsers, and other tools.</p></blockquote>

<p>Vagrantを使用することで <em>完全に動作する開発環境を人間の作業なしで作成でき、開発者は自分のマシンで好みのエディタ、ブラウザ、デバッグツールなどを使うことができます。</em></p>

<p>さっそくVagrantをインストールして仮想環境を起動してみましょう。</p>

<p>余談ですが手動でVirtual Boxを起動してVMを設定して必要ソフトウェアをセットアップして…という作業は最初の一回だけやるぶんにはいいのですが
<em>他メンバーに同じ環境を用意する</em> 場合に大変です。
自分が使っているVMをコピーして渡してもいいのですが
セットアップ後にインストールした不要ツールを取り除いたり逆に後から追加したライブラリ設定を戻したり…
こんなことをしているうちに元のVMが何が何だかわからなくなってしまった…という経験はありませんでしょうか？自分はかなり多いです。</p>

<h2>お断り</h2>

<p>先に断っておきますと、この記事に書いてある内容は <a href="http://www.vagrantup.com/">Vagrant 公式サイト</a> の <a href="http://docs.vagrantup.com/v2/getting-started/index.html">GETTING STARTED</a> を自分なりに噛み砕いたものです。
より正確にVagrantについての理解を深めたい場合は公式サイトを一読することがオススメです。</p>

<!-- more -->


<p>まず <em>Virtual Box</em> のインストールが必要です。僕の <a href="/blog/2013/06/08/start-desktop-linux-on-virtualbox/">前回の記事</a> あたりを参考にしつつインストールをしてください。</p>

<h2>Vagrantのインストール</h2>

<p>まずは <a href="http://www.vagrantup.com/">公式サイト</a> へアクセスしましょう。</p>

<p><a href="http://downloads.vagrantup.com/">ダウンロードページ</a> へアクセスし、最新バージョンのVagrantを選択して自分の使用しているOSにあわせたインストーラをダウンロードします。
以降Macを利用しているていで進めますがUbuntuなどのLinuxでも同じ手順で進められると思います。Windowsはよくわかりませんので後で環境探して試してみます…。
2013年7月14日現在の最新バージョンは <strong>1.2.3</strong> です。</p>

<p><img src="/images/posts/2013-07-14-use-vagrant/download-vagrant.png" alt="Download" /></p>

<p>ダウンロードしたインストーラを起動してVagrantをインストールしたらターミナルを開いてvagrantコマンドの確認をしましょう。</p>

<p><code>bash
$ vagrant -v
Vagrant version 1.2.3
</code></p>

<p>バージョン情報が表示されればインストール成功です。</p>

<h2>プロジェクトの設定</h2>

<p>Vagrantを使う上で必須なのがプロジェクトの設定ファイルである <strong>Vagrantfile</strong> を作成することです。
共通のVagrantfileを利用することで前述の完全に動作する開発環境を人間の作業なしで作成することができるのです。</p>

<p>今回はサンプルとして新規にVagrantfileを作成しましょう。適当なディレクトリを作成し、そこで <code>vagrant init</code> をすることでVagrantfileを作成します。</p>

<p><code>bash
$ mkdir vagrant_getting_started
$ cd vagrant_getting_started
$ vagrant init
A `Vagrantfile` has been placed in this directory. You are now
ready to `vagrant up` your first virtual environment! Please read
the comments in the Vagrantfile as well as documentation on
`vagrantup.com` for more information on using Vagrant.
$ ls -l
total 16
-rw-r--r--  1 jiska  staff   4.4K Jul 14 17:07 Vagrantfile
</code></p>

<p>できました。</p>

<p>Vagrantfileは <em>ruby</em> で記述することができます。
初期生成されたVagrantfileには細かいサンプルが記述されているのでそれを参考にして自分用のプロジェクトの設定を行いましょう。</p>

<h2>boxのダウンロード</h2>

<p>boxとはVagrantで使用する仮想マシーンの基本イメージです。ひな形とかテンプレートとかいうほうがイメージしやすいと思います。
boxにはCentOS, Debian, Ubuntu, Windows Serverなど様々なOSが利用できます。</p>

<p>本来ならば各人のシステムに合わせてboxを生成するのですが、今回は公式に提供されているboxから <em>precise64 (Ubuntu12.04 64bit)</em> を追加します。</p>

<p><code>bash
$ vagrant box add precise64 http://files.vagrantup.com/precise64.box
(ダウンロードに時間がかかるのでちょっと待つ）
$ vagrant box list
precise64 (virtualbox)
</code></p>

<p>boxの追加には <code>vagrant box add {name} {url}</code> , 一覧の確認には <code>vagrant box list</code> コマンドを利用します。これでboxにprecise64という名前でUbuntu12.04サーバーエディションが登録されました。</p>

<p>先ほどのVagrantfileを編集してboxの設定を変更します。</p>

<p><code>ruby
Vagrant.configure("2") do |config|
  config.vm.box = "precise64" # box名をここで指定する
end
</code></p>

<h2>仮想マシンを起動する</h2>

<p>起動には <code>vagrant up</code> コマンドを使用します。</p>

<p><code>bash
$ vagrant up
Bringing machine 'default' up with 'virtualbox' provider...
[default] Importing base box 'precise64'...
[default] Matching MAC address for NAT networking...
[default] Setting the name of the VM...
[default] Clearing any previously set forwarded ports...
[default] Creating shared folders metadata...
[default] Clearing any previously set network interfaces...
[default] Preparing network interfaces based on configuration...
[default] Forwarding ports...
[default] -- 22 =&gt; 2222 (adapter 1)
[default] Booting VM...
[default] Waiting for VM to boot. This can take a few minutes.
[default] VM booted and ready for use!
[default] Mounting shared folders...
[default] -- /vagrant
</code></p>

<p>VMが起動しました。</p>

<p><code>bash
$ ps aux | grep vagrant
jiska          30771   0.5  5.3  2724752 223116   ??  S     5:37PM   0:12.09 /Applications/VirtualBox.app/Contents/MacOS/VBoxHeadless --comment vagrant_getting_started_1373791025 --startvm 489b9052-9bfd-4063-b1cc-a6572b8a3a94 --vrde config
</code></p>

<p>起動したVMにsshで接続するためには <code>vagrant ssh</code> コマンドを使用します。</p>

<p>```bash
$ vagrant ssh
Welcome to Ubuntu 12.04 LTS (GNU/Linux 3.2.0-23-generic x86_64)</p>

<ul>
<li>Documentation:  https://help.ubuntu.com/
Welcome to your Vagrant-built virtual machine.
Last login: Sun Jul 14 08:42:40 2013 from 10.0.2.2
vagrant@precise64:~$ exit
logout
Connection to 127.0.0.1 closed.
$
```</li>
</ul>


<p>VMの停止は <code>vagrant halt</code> コマンドです。</p>

<p><code>bash
$ vagrant halt
</code></p>

<p>後は <strong>box起動時に必要な環境をセットアップするための設定をVagrantfile</strong> に記述することで各プロジェクトに沿った開発環境を作成することができます。Vagrantfileについては長くなってきたので次回です。</p>

<p>Vagrantを用いることでVMの初期設定、起動、停止が簡単にできました。Vagrantfileに設定でホストOS,ゲストOSとの共有フォルダ設定やネットワーク設定なども定義できます。
また、Vagrantfileをバージョン管理することで変更を追うことも容易になります。</p>

<p>現在のバージョンのVagrantはVirtualBoxだけでなく <em>VMware</em> や <em>Amazon EC2</em> もサポートしています。ネットワークさえ繋がれば仮想マシンを簡単に作成することが出来るのです。すごい！</p>

<h2>結論</h2>

<p><strong>Vagrant使おう!</strong> ということです。</p>
]]></content>
  </entry>
  
</feed>
